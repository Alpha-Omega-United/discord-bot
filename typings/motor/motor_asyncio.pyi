"""
This type stub file was generated by pyright.
"""

"""Asyncio support for Motor, an asynchronous driver for MongoDB."""
from __future__ import annotations

from typing import TYPE_CHECKING, Generic, Literal, TypeVar

if TYPE_CHECKING:
    from typing import Any

    import bson
    import pymongo

D = TypeVar("D")
JSON = str | int | float | list[JSON] | dict[JSON]

class AsyncIOMotorClient:
    def __init__(
        self,
        host: str = "localhost",
        port: int = 27017,
        document_class: type = dict,
        tz_aware: bool = False,
        connect: bool = True,
        **kwargs: Any
    ) -> None: ...
    def __getitem__(self, key: str) -> AsyncIOMotorDatabase: ...

class AsyncIOMotorDatabase:
    def __getitem__(self, key: str) -> AsyncIOMotorCollection[D]: ...

class AsyncIOMotorCollection(Generic[D]):
    async def delete_one(
        self,
        filter: JSON,
        collation: ... | None = None,
        hint: ... | None = None,
        session: ... | None = None,
    ) -> ...: ...
    def find(self, filter: None | JSON = None) -> AsyncIOMotorCursor[D]: ...
    async def find_one(self, filter: None | JSON = None) -> D: ...
    async def insert_one(self, document: JSON) -> ...: ...
    async def update_one(
        self, filter: JSON, update: dict[str, JSON], upsert: bool = False
    ) -> ...: ...
    async def update_many(
        self, filter: JSON, update: JSON, upsert: bool = False
    ) -> ...: ...

class AsyncIOMotorCursor(Generic[D]):
    def sort(
        self, key_or_list: str | list[str], direction: None | int = None
    ) -> AsyncIOMotorCursor[D]: ...
    def limit(self, limit: int) -> AsyncIOMotorCursor[D]: ...
    async def to_list(self, length: None | int = None) -> list[D]: ...

AsyncIOMotorClientSession = ...
AsyncIOMotorCommandCursor = ...
AsyncIOMotorLatentCommandCursor = ...
AsyncIOMotorChangeStream = ...
AsyncIOMotorGridFSBucket = ...
AsyncIOMotorGridIn = ...
AsyncIOMotorGridOut = ...
AsyncIOMotorGridOutCursor = ...
AsyncIOMotorClientEncryption = ...
